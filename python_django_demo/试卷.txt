一，选择题
	以下哪个不是python解释器(D)
		CPython
		IPython
		Jython
		py
	下列哪个表达式在Python中是非法的？(B)
		x = y = z = 1
		x = (y = z + 1)
		x, y = y, x
		x += y
	print("%d %% %d"%(3, 5)) 输出结果是？(A)
		3 % 5
		3 %% 5
		2
		1
	“今年第一季度GDP提高了x%”，x为float值，格式化字符串，x保留两位小数，下面哪个是正确的？(C)
		print("今年第一季度GDP提高了%.2f"%(22.234,))
		print("今年第一季度GDP提高了%.2f%"%(22.234,))
		print("今年第一季度GDP提高了%.2f%%"%(22.234,))
		print("今年第一季度GDP提高了{0}%".format(22.234))
	l = ["cdsa", 32, 33.2, None, True];l.pop();print(l);打印结果是：(C)
		["cdsa", 32, 33.2, True]
		["cdsa", 32, None, True]
		["cdsa", 32, 33.2, None]
		[32, 33.2, None, True]
	print(15 // 2);(B)
		1
		7
		7.5
		8
	下面哪个不是 python 的数据类型(D)
		int
		str
		set
		double
	*args 代表什么参数(B)
		位置参数
		可变参数
		可变关键字参数
		命名关键字参数
	函数多个返回值，实际上返回的是什么数据类型？(A)
		list
		set
		tuple
		dict
	安装Django2.0.7版本，使用的什么命令？(C)
		pip install django
		pip install django=2.0.7
		pip install django==2.0.7
		pip install django version=2.0.7

二、填空题
	字符串前面添加u、r、b分别代表什么？
答：u:表示unicode字符串
       r:非转义的原始字符串
       b:bytes

	requests模块请求远程服务器，如何设置相应编码？

	windows下执行python的方式；
答：直接命令行启用Python

	创建python package，会自动生成什么文件？
答：自动地生成一个空的__init__.py文件

	python变量作用域有哪些？
答：L （Local） ---- 局部作用域；
       E （Enclosing） ---- 闭包函数外的函数中；
       G （Global） ---- 全局作用域；
        B （Built-in） ---- 内建作用域；

三、问答题
	python命名规则？
答：字母、数字、下划线，但是数字不能做为开头；
      不能是 Python 关键字，但可以包含关键字；

	set删除操作中，pop、remove的区别？
答：remove 删除首个符合条件的元素
      pop删除第一个元素，无参

	list使用+=和append函数的区别？
答：+=将后面集合的元素添加到前面集合
       和append的区别，append是将append的整体作为一个元素纳入前面集合

	使用bs4解析响应内容，获取某div（class为aaa）下所有span节点；
答：from bs4 import *
	简述Django操作流程、组件的作用；
答：view.py把要展示的数据返回给模板Template，Template然后到控制器，
控制器在页面输入URL，URL根据url匹配的相应视图函数返回给view.py，
view.py将数据返回给视图给models（models去数据库提取数据）。

四、编程题
	定义一个函数，接受 0 个或多个函数，返回累计乘积；
def prodouct(*num):
    n = 1
    for x in num:
        n = n * x
    return n


	定义一个函数，去掉字符串前后的空格；
def trim(s):
    if len(s) < 0:
        return ''
    index = 0
    while index < len(s):
        if s[index] == ' ':
            if index+1 == len(s):
                return ''
            else:
                index += 1
        else:
            s = s[index:]
            break
    index=-1
    while index >= -len(s):
        if s[index] == ' ':
            index -= 1
        else:
            if index == -1:
                break
            else:
                s = s[:index+1]
                break
    return s